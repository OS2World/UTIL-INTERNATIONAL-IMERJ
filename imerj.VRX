/*:VRX         Main
*/
/*  Main
*/
Main:
/*  Process the arguments.
    Get the parent window.
*/
    parse source . calledAs .
    parent = ""
    argCount = arg()
    argOff = 0
    if( calledAs \= "COMMAND" )then do
        if argCount >= 1 then do
            parent = arg(1)
            argCount = argCount - 1
            argOff = 1
        end
    end; else do
        call VROptions 'ImplicitNames'
        call VROptions 'NoEchoQuit'
    end
    InitArgs.0 = argCount
    if( argCount > 0 )then do i = 1 to argCount
        InitArgs.i = arg( i + argOff )
    end
    drop calledAs argCount argOff

/*  Load the windows
*/
    call VRInit
    parse source . . spec
    _VREPrimaryWindowPath = ,
        VRParseFileName( spec, "dpn" ) || ".VRW"
    _VREPrimaryWindow = ,
        VRLoad( parent, _VREPrimaryWindowPath )
    drop parent spec
    if( _VREPrimaryWindow == "" )then do
        call VRMessage "", "Cannot load window:" VRError(), ,
            "Error!"
        _VREReturnValue = 32000
        signal _VRELeaveMain
    end

/*  Process events
*/
    call Init
    signal on halt
    do while( \ VRGet( _VREPrimaryWindow, "Shutdown" ) )
        _VREEvent = VREvent()
        interpret _VREEvent
    end
_VREHalt:
    _VREReturnValue = Fini()
    call VRDestroy _VREPrimaryWindow
_VRELeaveMain:
    call VRFini
exit _VREReturnValue

VRLoadSecondary:
    __vrlsWait = abbrev( 'WAIT', translate(arg(2)), 1 )
    if __vrlsWait then do
        call VRFlush
    end
    __vrlsHWnd = VRLoad( VRWindow(), VRWindowPath(), arg(1) )
    if __vrlsHWnd = '' then signal __vrlsDone
    if __vrlsWait \= 1 then signal __vrlsDone
    call VRSet __vrlsHWnd, 'WindowMode', 'Modal' 
    __vrlsTmp = __vrlsWindows.0
    if( DataType(__vrlsTmp) \= 'NUM' ) then do
        __vrlsTmp = 1
    end
    else do
        __vrlsTmp = __vrlsTmp + 1
    end
    __vrlsWindows.__vrlsTmp = VRWindow( __vrlsHWnd )
    __vrlsWindows.0 = __vrlsTmp
    do while( VRIsValidObject( VRWindow() ) = 1 )
        __vrlsEvent = VREvent()
        interpret __vrlsEvent
    end
    __vrlsTmp = __vrlsWindows.0
    __vrlsWindows.0 = __vrlsTmp - 1
    call VRWindow __vrlsWindows.__vrlsTmp 
    __vrlsHWnd = ''
__vrlsDone:
return __vrlsHWnd

/*:VRX         AdjustPos
*/
/* Determines whether or not the byte at the given position is part of a 
 * double-byte character, and (if so) where that character's actual starting 
 * position is.
 */
AdjustPos: PROCEDURE EXPOSE cwidth
    PARSE ARG flags, offset, shift

    cwidth = 0
    start  = 0
    IF flags == '' THEN RETURN 1
    IF offset < 1  THEN RETURN 1
    SELECT
        WHEN SUBSTR( flags, offset, 1 ) == 1 THEN DO
            cwidth = 2
            start  = offset
        END
        WHEN SUBSTR( flags, offset, 1 ) == 2 THEN DO
            cwidth = 2
            /* Shift = 0, move to start of previous char.
             * Shift = 1, move to start of next char.
             */
            IF shift = 0 THEN start  = offset - 1
            ELSE              start  = offset + 1
        END
        OTHERWISE DO
            cwidth = 1
            start  = offset 
        END
    END

RETURN start

/*:VRX         CharAttr
*/
/* Build a sequence of attribute flags for each byte in the text:
 *   0 = single-byte character
 *   1 = first byte of a double-byte character
 *   2 = second byte of a double-byte character
 */
CharAttr: PROCEDURE 
    PARSE ARG text, offset

    flags = ''
    dbcs  = 0
    DO i = 1 TO LENGTH( text ) 
        nextbyte = C2D( SUBSTR( text, i, 1 ))

        IF ( \dbcs ) THEN DO
            IF ( nextbyte > 128 & nextbyte < 160 ) | ( nextbyte > 223 & nextbyte < 253 ) THEN DO
                flags = flags || '1'
                dbcs  = 1
            END
            ELSE 
                flags = flags || '0'
        END
        ELSE DO
            flags = flags || '2'
            dbcs  = 0
        END
    END

RETURN flags

/*:VRX         ConvertFullwidth
*/
ConvertFullwidth: 
    PARSE ARG letter

    SELECT
        WHEN letter == 'A' THEN out = 'Ç`'
        WHEN letter == 'B' THEN out = 'Ça'
        WHEN letter == 'C' THEN out = 'Çb'
        WHEN letter == 'D' THEN out = 'Çc'
        WHEN letter == 'E' THEN out = 'Çd'
        WHEN letter == 'F' THEN out = 'Çe'
        WHEN letter == 'G' THEN out = 'Çf'
        WHEN letter == 'H' THEN out = 'Çg'
        WHEN letter == 'I' THEN out = 'Çh'
        WHEN letter == 'J' THEN out = 'Çi'
        WHEN letter == 'K' THEN out = 'Çj'
        WHEN letter == 'L' THEN out = 'Çk'
        WHEN letter == 'M' THEN out = 'Çl'
        WHEN letter == 'N' THEN out = 'Çm'
        WHEN letter == 'O' THEN out = 'Çn'
        WHEN letter == 'P' THEN out = 'Ço'
        WHEN letter == 'Q' THEN out = 'Çp'
        WHEN letter == 'R' THEN out = 'Çq'
        WHEN letter == 'S' THEN out = 'Çr'
        WHEN letter == 'T' THEN out = 'Çs'
        WHEN letter == 'U' THEN out = 'Çt'
        WHEN letter == 'V' THEN out = 'Çu'
        WHEN letter == 'W' THEN out = 'Çv'
        WHEN letter == 'X' THEN out = 'Çw'
        WHEN letter == 'Y' THEN out = 'Çx'
        WHEN letter == 'Z' THEN out = 'Çy'
        WHEN letter == 'a' THEN out = 'ÇÅ'
        WHEN letter == 'b' THEN out = 'ÇÇ'
        WHEN letter == 'c' THEN out = 'ÇÉ'
        WHEN letter == 'd' THEN out = 'ÇÑ'
        WHEN letter == 'e' THEN out = 'ÇÖ'
        WHEN letter == 'f' THEN out = 'ÇÜ'
        WHEN letter == 'g' THEN out = 'Çá'
        WHEN letter == 'h' THEN out = 'Çà'
        WHEN letter == 'i' THEN out = 'Çâ'
        WHEN letter == 'j' THEN out = 'Çä'
        WHEN letter == 'k' THEN out = 'Çã'
        WHEN letter == 'l' THEN out = 'Çå'
        WHEN letter == 'm' THEN out = 'Çç'
        WHEN letter == 'n' THEN out = 'Çé'
        WHEN letter == 'o' THEN out = 'Çè'
        WHEN letter == 'p' THEN out = 'Çê'
        WHEN letter == 'q' THEN out = 'Çë'
        WHEN letter == 'r' THEN out = 'Çí'
        WHEN letter == 's' THEN out = 'Çì'
        WHEN letter == 't' THEN out = 'Çî'
        WHEN letter == 'u' THEN out = 'Çï'
        WHEN letter == 'v' THEN out = 'Çñ'
        WHEN letter == 'w' THEN out = 'Çó'
        WHEN letter == 'x' THEN out = 'Çò'
        WHEN letter == 'y' THEN out = 'Çô'
        WHEN letter == 'z' THEN out = 'Çö'
        WHEN letter == '0' THEN out = 'ÇO'
        WHEN letter == '1' THEN out = 'ÇP'
        WHEN letter == '2' THEN out = 'ÇQ'
        WHEN letter == '3' THEN out = 'ÇR'
        WHEN letter == '4' THEN out = 'ÇS'
        WHEN letter == '5' THEN out = 'ÇT'
        WHEN letter == '6' THEN out = 'ÇU'
        WHEN letter == '7' THEN out = 'ÇV'
        WHEN letter == '8' THEN out = 'ÇW'
        WHEN letter == '9' THEN out = 'ÇX'
        WHEN letter == '.' THEN out = 'ÅD'
        WHEN letter == ',' THEN out = 'ÅC'
        WHEN letter == '!' THEN out = 'ÅI'
        WHEN letter == '@' THEN out = 'Åó'
        WHEN letter == '#' THEN out = 'Åî'
        WHEN letter == '$' THEN out = 'Åê'
        WHEN letter == '%' THEN out = 'Åì'
        WHEN letter == '^' THEN out = 'ÅO'
        WHEN letter == '`' THEN out = 'Åe'
        WHEN letter == '&' THEN out = 'Åï'
        WHEN letter == '*' THEN out = 'Åñ'
        WHEN letter == '(' THEN out = 'Åi'
        WHEN letter == ')' THEN out = 'Åj'
        WHEN letter == '-' THEN out = 'Å|'
        WHEN letter == '~' THEN out = 'ÅP'
        WHEN letter == '+' THEN out = 'Å{'
        WHEN letter == '_' THEN out = 'ÅQ'
        WHEN letter == '=' THEN out = 'ÅÅ'
        WHEN letter == '[' THEN out = 'Åm'
        WHEN letter == ']' THEN out = 'Ån'
        WHEN letter == '{' THEN out = 'Åo'
        WHEN letter == '}' THEN out = 'Åp'
        WHEN letter == '\' THEN out = 'Å_'
        WHEN letter == '/' THEN out = 'Å^'
        WHEN letter == ':' THEN out = 'ÅF'
        WHEN letter == ';' THEN out = 'ÅG'
        WHEN letter == '<' THEN out = 'Åq'
        WHEN letter == '>' THEN out = 'År'
        WHEN letter == '?' THEN out = 'ÅH'
        WHEN letter == "'" THEN out = 'Åf'
        WHEN letter == '"' THEN out = '˙W'
        WHEN letter == ' ' THEN out = 'Å@'

        WHEN letter == '' THEN out = ''
        OTHERWISE out = letter
    END

RETURN out

/*:VRX         ConvertKana
*/
ConvertKana: 
    PARSE ARG wapuro

    IF VRGet('MI_FULLWIDTH', 'Checked') THEN DO

        IF VERIFY( LEFT( wapuro, 1 ), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 0 THEN 
            wapuro = TRANSLATE( wapuro )

        SELECT
        /* ideographic punctuation characters */
            WHEN wapuro == ' '                      THEN out = 'Å@'
            WHEN wapuro == ','                      THEN out = 'ÅA'
            WHEN wapuro == '.'                      THEN out = 'ÅB'
            WHEN wapuro == '-'                      THEN out = 'Å['
            WHEN wapuro == '|'                      THEN out = 'ÅE'
            WHEN wapuro == "'"                      THEN out = 'Åu'
            WHEN wapuro == '"'                      THEN out = 'Åv'

        /* hiragana */
            WHEN wapuro == 'a'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'Çü' 
                                                        ELSE                   out = 'Ç†' 
                                                    END
            WHEN wapuro == 'i'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'Ç°' 
                                                        ELSE                   out = 'Ç¢'
                                                    END
            WHEN wapuro == 'u'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'Ç£' 
                                                        ELSE                   out = 'Ç§' 
                                                    END
            WHEN wapuro == 'e'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'Ç•' 
                                                        ELSE                   out = 'Ç¶' 
                                                    END
            WHEN wapuro == 'o'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'Çß' 
                                                        ELSE                   out = 'Ç®' 
                                                    END
            WHEN wapuro == 'ka'                     THEN out = 'Ç©'
            WHEN wapuro == 'ki'                     THEN out = 'Ç´'
            WHEN wapuro == 'ku'                     THEN out = 'Ç≠'
            WHEN wapuro == 'ke'                     THEN out = 'ÇØ'
            WHEN wapuro == 'ko'                     THEN out = 'Ç±'
            WHEN wapuro == 'ga'                     THEN out = 'Ç™'
            WHEN wapuro == 'gi'                     THEN out = 'Ç¨'
            WHEN wapuro == 'gu'                     THEN out = 'ÇÆ'
            WHEN wapuro == 'ge'                     THEN out = 'Ç∞'
            WHEN wapuro == 'go'                     THEN out = 'Ç≤'
            WHEN wapuro == 'sa'                     THEN out = 'Ç≥'
            WHEN wapuro == 'shi' | wapuro == 'si'   THEN out = 'Çµ'
            WHEN wapuro == 'su'                     THEN out = 'Ç∑'
            WHEN wapuro == 'se'                     THEN out = 'Çπ'
            WHEN wapuro == 'so'                     THEN out = 'Çª'
            WHEN wapuro == 'za'                     THEN out = 'Ç¥'
            WHEN wapuro == 'ji' | wapuro == 'zi'    THEN out = 'Ç∂'
            WHEN wapuro == 'zu'                     THEN out = 'Ç∏'
            WHEN wapuro == 'ze'                     THEN out = 'Ç∫'
            WHEN wapuro == 'zo'                     THEN out = 'Çº'
            WHEN wapuro == 'ta'                     THEN out = 'ÇΩ'
            WHEN wapuro == 'chi' | wapuro == 'ti'   THEN out = 'Çø'
            WHEN wapuro == 'tsu' | wapuro == 'tu'   THEN DO 
                                                        IF smallkana == 1 THEN out = 'Ç¡' 
                                                        ELSE                   out = 'Ç¬' 
                                                    END
            WHEN wapuro == 'te'                     THEN out = 'Çƒ'
            WHEN wapuro == 'to'                     THEN out = 'Ç∆'
            WHEN wapuro == 'da'                     THEN out = 'Çæ'
            WHEN wapuro == 'di' | wapuro == 'dzi'   THEN out = 'Ç¿'
            WHEN wapuro == 'du' | wapuro == 'dzu'   THEN out = 'Ç√'
            WHEN wapuro == 'de'                     THEN out = 'Ç≈'
            WHEN wapuro == 'do'                     THEN out = 'Ç«'
            WHEN wapuro == 'na'                     THEN out = 'Ç»'
            WHEN wapuro == 'ni'                     THEN out = 'Ç…'
            WHEN wapuro == 'nu'                     THEN out = 'Ç '
            WHEN wapuro == 'ne'                     THEN out = 'ÇÀ'
            WHEN wapuro == 'no'                     THEN out = 'ÇÃ'
            WHEN wapuro == 'ha'                     THEN out = 'ÇÕ'
            WHEN wapuro == 'hi'                     THEN out = 'Ç–'
            WHEN wapuro == 'fu'                     THEN out = 'Ç”'
            WHEN wapuro == 'he'                     THEN out = 'Ç÷'
            WHEN wapuro == 'ho'                     THEN out = 'ÇŸ'
            WHEN wapuro == 'ba'                     THEN out = 'ÇŒ'
            WHEN wapuro == 'bi'                     THEN out = 'Ç—'
            WHEN wapuro == 'bu'                     THEN out = 'Ç‘'
            WHEN wapuro == 'be'                     THEN out = 'Ç◊'
            WHEN wapuro == 'bo'                     THEN out = 'Ç⁄'
            WHEN wapuro == 'pa'                     THEN out = 'Çœ'
            WHEN wapuro == 'pi'                     THEN out = 'Ç“'
            WHEN wapuro == 'pu'                     THEN out = 'Ç’'
            WHEN wapuro == 'pe'                     THEN out = 'Çÿ'
            WHEN wapuro == 'po'                     THEN out = 'Ç€'
            WHEN wapuro == 'ma'                     THEN out = 'Ç‹'
            WHEN wapuro == 'mi'                     THEN out = 'Ç›'
            WHEN wapuro == 'mu'                     THEN out = 'Çﬁ'
            WHEN wapuro == 'me'                     THEN out = 'Çﬂ'
            WHEN wapuro == 'mo'                     THEN out = 'Ç‡'
            WHEN wapuro == 'ya'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'Ç·' 
                                                        ELSE                   out = 'Ç‚'
                                                    END
            WHEN wapuro == 'yu'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'Ç„' 
                                                        ELSE                   out = 'Ç‰'
                                                    END
            WHEN wapuro == 'yo'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÇÂ' 
                                                        ELSE                   out = 'ÇÊ'
                                                    END
            WHEN wapuro == 'ra' | wapuro == 'la'    THEN out = 'ÇÁ'
            WHEN wapuro == 'ri' | wapuro == 'li'    THEN out = 'ÇË'
            WHEN wapuro == 'ru' | wapuro == 'lu'    THEN out = 'ÇÈ'
            WHEN wapuro == 're' | wapuro == 'le'    THEN out = 'ÇÍ'
            WHEN wapuro == 'ro' | wapuro == 'lo'    THEN out = 'ÇÎ'
            WHEN wapuro == 'wa'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÇÏ' 
                                                        ELSE                   out = 'ÇÌ'
                                                    END
            WHEN wapuro == 'wo'                     THEN out = 'Ç'
            WHEN wapuro == 'n'  | wapuro == 'm'     THEN out = 'ÇÒ'
            WHEN wapuro == 'kya'                    THEN out = 'Ç´Ç·'
            WHEN wapuro == 'kyu'                    THEN out = 'Ç´Ç„'
            WHEN wapuro == 'kyo'                    THEN out = 'Ç´ÇÂ'
            WHEN wapuro == 'gya'                    THEN out = 'Ç¨Ç·'
            WHEN wapuro == 'gyu'                    THEN out = 'Ç´Ç„'
            WHEN wapuro == 'gyo'                    THEN out = 'Ç¨ÇÂ'
            WHEN wapuro == 'sha' | wapuro == 'sya'  THEN out = 'ÇµÇ·'
            WHEN wapuro == 'shu' | wapuro == 'syu'  THEN out = 'ÇµÇ„'
            WHEN wapuro == 'sho' | wapuro == 'syo'  THEN out = 'ÇµÇÂ'
            WHEN wapuro == 'ja'  | wapuro == 'zya'  THEN out = 'Ç∂Ç·'
            WHEN wapuro == 'ju'  | wapuro == 'zyu'  THEN out = 'Ç∂Ç„'
            WHEN wapuro == 'jo'  | wapuro == 'zyo'  THEN out = 'Ç∂ÇÂ'
            WHEN wapuro == 'cha'                    THEN out = 'ÇøÇ·'
            WHEN wapuro == 'chu'                    THEN out = 'ÇøÇ„'
            WHEN wapuro == 'cho'                    THEN out = 'ÇøÇÂ'
            WHEN wapuro == 'nya'                    THEN out = 'Ç…Ç·'
            WHEN wapuro == 'nyu'                    THEN out = 'Ç…Ç„'
            WHEN wapuro == 'nyo'                    THEN out = 'Ç…ÇÂ'
            WHEN wapuro == 'hya'                    THEN out = 'Ç–Ç·'
            WHEN wapuro == 'hyu'                    THEN out = 'Ç–Ç„'
            WHEN wapuro == 'hyo'                    THEN out = 'Ç–ÇÂ'
            WHEN wapuro == 'bya'                    THEN out = 'Ç—Ç·'
            WHEN wapuro == 'byu'                    THEN out = 'Ç—Ç„'
            WHEN wapuro == 'byo'                    THEN out = 'Ç—ÇÂ'
            WHEN wapuro == 'pya'                    THEN out = 'Ç“Ç·'
            WHEN wapuro == 'pyu'                    THEN out = 'Ç“Ç„'
            WHEN wapuro == 'pyo'                    THEN out = 'Ç“ÇÂ'
            WHEN wapuro == 'mya'                    THEN out = 'Ç›Ç·'
            WHEN wapuro == 'myu'                    THEN out = 'Ç›Ç„'
            WHEN wapuro == 'myo'                    THEN out = 'Ç›ÇÂ'
            WHEN wapuro == 'rya'                    THEN out = 'ÇËÇ·'
            WHEN wapuro == 'ryu'                    THEN out = 'ÇËÇ„'
            WHEN wapuro == 'ryo'                    THEN out = 'ÇËÇÂ'

        /* katakana */
            WHEN wapuro == 'A'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'É@' 
                                                        ELSE out = 'ÉA'
                                                    END
            WHEN wapuro == 'I'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÉB' 
                                                        ELSE out = 'ÉC'
                                                    END
            WHEN wapuro == 'U'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÉD' 
                                                        ELSE out = 'ÉE'
                                                    END
            WHEN wapuro == 'E'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÉF' 
                                                        ELSE out = 'ÉG'
                                                    END
            WHEN wapuro == 'O'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÉH' 
                                                        ELSE out = 'ÉI'
                                                    END
            WHEN wapuro == 'KA'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'Éï' 
                                                        ELSE out = 'ÉJ'
                                                    END
            WHEN wapuro == 'KI'                     THEN out = 'ÉL'
            WHEN wapuro == 'KU'                     THEN out = 'ÉN'
            WHEN wapuro == 'KE'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'Éñ' 
                                                        ELSE out = 'ÉP'
                                                    END
            WHEN wapuro == 'KO'                     THEN out = 'ÉR'
            WHEN wapuro == 'GA'                     THEN out = 'ÉK'
            WHEN wapuro == 'GI'                     THEN out = 'ÉM'
            WHEN wapuro == 'GU'                     THEN out = 'ÉO'
            WHEN wapuro == 'GE'                     THEN out = 'ÉQ'
            WHEN wapuro == 'GO'                     THEN out = 'ÉS'
            WHEN wapuro == 'SA'                     THEN out = 'ÉT'
            WHEN wapuro == 'SHI' | wapuro == 'SI'   THEN out = 'ÉV'
            WHEN wapuro == 'SU'                     THEN out = 'ÉX'
            WHEN wapuro == 'SE'                     THEN out = 'ÉZ'
            WHEN wapuro == 'SO'                     THEN out = 'É\'
            WHEN wapuro == 'ZA'                     THEN out = 'ÉU'
            WHEN wapuro == 'JI' | wapuro == 'ZI'    THEN out = 'ÉW'
            WHEN wapuro == 'ZU'                     THEN out = 'ÉY'
            WHEN wapuro == 'ZE'                     THEN out = 'É['
            WHEN wapuro == 'ZO'                     THEN out = 'É]'
            WHEN wapuro == 'TA'                     THEN out = 'É^'
            WHEN wapuro == 'CHI'                    THEN out = 'É`'
            WHEN wapuro == 'TSU' | wapuro == 'TU'   THEN DO 
                                                        IF smallkana == 1 THEN out = 'Éb' 
                                                        ELSE                   out = 'Éc'
                                                    END
            WHEN wapuro == 'TE'                     THEN out = 'Ée'
            WHEN wapuro == 'TO'                     THEN out = 'Ég'
            WHEN wapuro == 'DA'                     THEN out = 'É_'
            WHEN wapuro == 'DZI'                    THEN out = 'Éa'
            WHEN wapuro == 'DU' | wapuro == 'DZU'   THEN out = 'Éd'
            WHEN wapuro == 'DE'                     THEN out = 'Éf'
            WHEN wapuro == 'DO'                     THEN out = 'Éh'
            WHEN wapuro == 'NA'                     THEN out = 'Éi'
            WHEN wapuro == 'NI'                     THEN out = 'Éj'
            WHEN wapuro == 'NU'                     THEN out = 'Ék'
            WHEN wapuro == 'NE'                     THEN out = 'Él'
            WHEN wapuro == 'NO'                     THEN out = 'Ém'
            WHEN wapuro == 'HA'                     THEN out = 'Én'
            WHEN wapuro == 'HI'                     THEN out = 'Éq'
            WHEN wapuro == 'FU' | wapuro == 'HU'    THEN out = 'Ét'
            WHEN wapuro == 'HE'                     THEN out = 'Éw'
            WHEN wapuro == 'HO'                     THEN out = 'Éz'
            WHEN wapuro == 'BA'                     THEN out = 'Éo'
            WHEN wapuro == 'BI'                     THEN out = 'Ér'
            WHEN wapuro == 'BU'                     THEN out = 'Éu'
            WHEN wapuro == 'BE'                     THEN out = 'Éx'
            WHEN wapuro == 'BO'                     THEN out = 'É{'
            WHEN wapuro == 'PA'                     THEN out = 'Ép'
            WHEN wapuro == 'PI'                     THEN out = 'És'
            WHEN wapuro == 'PU'                     THEN out = 'Év'
            WHEN wapuro == 'PE'                     THEN out = 'Éy'
            WHEN wapuro == 'PO'                     THEN out = 'É|'
            WHEN wapuro == 'MA'                     THEN out = 'É}'
            WHEN wapuro == 'MI'                     THEN out = 'É~'
            WHEN wapuro == 'MU'                     THEN out = 'ÉÄ'
            WHEN wapuro == 'ME'                     THEN out = 'ÉÅ'
            WHEN wapuro == 'MO'                     THEN out = 'ÉÇ'
            WHEN wapuro == 'YA'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÉÉ' 
                                                        ELSE                   out = 'ÉÑ'
                                                    END
            WHEN wapuro == 'YU'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'ÉÖ' 
                                                        ELSE                   out = 'ÉÜ'
                                                    END
            WHEN wapuro == 'YO'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'Éá' 
                                                        ELSE                   out = 'Éà'
                                                    END
            WHEN wapuro == 'RA' | wapuro == 'LA'    THEN out = 'Éâ'
            WHEN wapuro == 'RI' | wapuro == 'LI'    THEN out = 'Éä'
            WHEN wapuro == 'RU' | wapuro == 'LU'    THEN out = 'Éã'
            WHEN wapuro == 'RE' | wapuro == 'LE'    THEN out = 'Éå'
            WHEN wapuro == 'RO' | wapuro == 'LO'    THEN out = 'Éç'
            WHEN wapuro == 'WA'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'Éé' 
                                                        ELSE                   out = 'Éè'
                                                    END
            WHEN wapuro == 'WO'                     THEN out = 'Éí'
            WHEN wapuro == 'N'  | wapuro == 'M'     THEN out = 'Éì'
            WHEN wapuro == 'KYA'                    THEN out = 'ÉLÉÉ'
            WHEN wapuro == 'KYU'                    THEN out = 'ÉLÉÖ'
            WHEN wapuro == 'KYO'                    THEN out = 'ÉLÉá'
            WHEN wapuro == 'GYA'                    THEN out = 'ÉMÉÉ'
            WHEN wapuro == 'GYU'                    THEN out = 'ÉMÉÖ'
            WHEN wapuro == 'GYO'                    THEN out = 'ÉMÉá'
            WHEN wapuro == 'SHA' | wapuro == 'SYA'  THEN out = 'ÉVÉÉ'
            WHEN wapuro == 'SHU' | wapuro == 'SYU'  THEN out = 'ÉVÉÖ'
            WHEN wapuro == 'SHO' | wapuro == 'SYO'  THEN out = 'ÉVÉá'
            WHEN wapuro == 'JA'  | wapuro == 'ZYA'  THEN out = 'ÉWÉÉ'
            WHEN wapuro == 'JU'  | wapuro == 'ZYU'  THEN out = 'ÉWÉÖ'
            WHEN wapuro == 'JO'  | wapuro == 'ZYO'  THEN out = 'ÉWÉá'
            WHEN wapuro == 'CHA'                    THEN out = 'É`ÉÉ'
            WHEN wapuro == 'CHU'                    THEN out = 'É`ÉÖ'
            WHEN wapuro == 'CHO'                    THEN out = 'É`Éá'
            WHEN wapuro == 'NYA'                    THEN out = 'ÉjÉÉ'
            WHEN wapuro == 'NYU'                    THEN out = 'ÉjÉÖ'
            WHEN wapuro == 'NYO'                    THEN out = 'ÉjÉá'
            WHEN wapuro == 'HYA'                    THEN out = 'ÉqÉÉ'
            WHEN wapuro == 'HYU'                    THEN out = 'ÉqÉÖ'
            WHEN wapuro == 'HYO'                    THEN out = 'ÉqÉá'
            WHEN wapuro == 'BYA'                    THEN out = 'ÉrÉÉ'
            WHEN wapuro == 'BYU'                    THEN out = 'ÉrÉÖ'
            WHEN wapuro == 'BYO'                    THEN out = 'ÉrÉá'
            WHEN wapuro == 'PYA'                    THEN out = 'ÉsÉÉ'
            WHEN wapuro == 'PYU'                    THEN out = 'ÉsÉÖ'
            WHEN wapuro == 'PYO'                    THEN out = 'ÉsÉá'
            WHEN wapuro == 'MYA'                    THEN out = 'É~ÉÉ'
            WHEN wapuro == 'MYU'                    THEN out = 'É~ÉÖ'
            WHEN wapuro == 'MYO'                    THEN out = 'É~Éá'
            WHEN wapuro == 'RYA'                    THEN out = 'ÉäÉÉ'
            WHEN wapuro == 'RYU'                    THEN out = 'ÉäÉÖ'
            WHEN wapuro == 'RYO'                    THEN out = 'ÉäÉá'

        /* special katakana forms */
            WHEN wapuro == 'KWA' THEN out = 'ÉNÉÉ'
            WHEN wapuro == 'KWO' THEN out = 'ÉNÉH'
            WHEN wapuro == 'GWA' THEN out = 'ÉOÉÉ'
            WHEN wapuro == 'SHE' THEN out = 'ÉVÉF'
            WHEN wapuro == 'JE'  THEN out = 'ÉWÉF'
            WHEN wapuro == 'CHE' THEN out = 'É`ÉF'
            WHEN wapuro == 'TSA' THEN out = 'ÉcÉÉ'
            WHEN wapuro == 'TSE' THEN out = 'ÉcÉF'
            WHEN wapuro == 'TSO' THEN out = 'ÉcÉH'
            WHEN wapuro == 'TI'  THEN out = 'ÉeÉB'
            WHEN wapuro == 'DI'  THEN out = 'ÉfÉB'
            WHEN wapuro == 'DYU' THEN out = 'ÉfÉÖ'
            WHEN wapuro == 'FA'  THEN out = 'ÉtÉÉ'
            WHEN wapuro == 'FI'  THEN out = 'ÉtÉB'
            WHEN wapuro == 'FE'  THEN out = 'ÉtÉF'
            WHEN wapuro == 'FO'  THEN out = 'ÉtÉH'
            WHEN wapuro == 'WI'  THEN out = 'ÉEÉB'
            WHEN wapuro == 'WE'  THEN out = 'ÉEÉF'
            WHEN wapuro == 'WO'  THEN out = 'ÉEÉH'
            WHEN wapuro == 'YE'  THEN out = 'ÉCÉF'
            WHEN wapuro == 'VA'  THEN out = 'ÉîÉÉ'
            WHEN wapuro == 'VI'  THEN out = 'ÉîÉB'
            WHEN wapuro == 'VU'  THEN out = 'Éî'
            WHEN wapuro == 'VE'  THEN out = 'ÉîÉF'
            WHEN wapuro == 'VO'  THEN out = 'ÉîÉH'

            WHEN wapuro == '' THEN out = ''
            OTHERWISE              out = ConvertFullwidth( wapuro )
        END
    END

    ELSE DO
        /* When fullwidth mode is off, all kana will be converted to halfwidth 
         * katakana.
         */
        wapuro = TRANSLATE( wapuro )
        SELECT
            WHEN wapuro == ','                      THEN out = '§'
            WHEN wapuro == '.'                      THEN out = '°'
            WHEN wapuro == '-'                      THEN out = '∞'
            WHEN wapuro == '|'                      THEN out = '•'
            WHEN wapuro == "'"                      THEN out = '¢'
            WHEN wapuro == '"'                      THEN out = '£'

            WHEN wapuro == 'A'                      THEN DO 
                                                        IF smallkana == 1 THEN out = 'ß'
                                                        ELSE                   out = '±'
                                                    END
            WHEN wapuro == 'I'                      THEN DO 
                                                        IF smallkana == 1 THEN out = '®'
                                                        ELSE                   out = '≤'
                                                    END
            WHEN wapuro == 'U'                      THEN DO 
                                                        IF smallkana == 1 THEN out = '©'
                                                        ELSE                   out = '≥'
                                                    END
            WHEN wapuro == 'E'                      THEN DO 
                                                        IF smallkana == 1 THEN out = '™'
                                                        ELSE                   out = '¥'
                                                    END
            WHEN wapuro == 'O'                      THEN DO 
                                                        IF smallkana == 1 THEN out = '´'
                                                        ELSE                   out = 'µ'
                                                    END
            WHEN wapuro == 'KA'                     THEN out = '∂'
            WHEN wapuro == 'KI'                     THEN out = '∑'
            WHEN wapuro == 'KU'                     THEN out = '∏'
            WHEN wapuro == 'KE'                     THEN out = 'π'
            WHEN wapuro == 'KO'                     THEN out = '∫'
            WHEN wapuro == 'GA'                     THEN out = '∂ﬁ'
            WHEN wapuro == 'GI'                     THEN out = '∑ﬁ'
            WHEN wapuro == 'GU'                     THEN out = '∏ﬁ'
            WHEN wapuro == 'GE'                     THEN out = 'πﬁ'
            WHEN wapuro == 'GO'                     THEN out = '∫ﬁ'
            WHEN wapuro == 'SA'                     THEN out = 'ª'
            WHEN wapuro == 'SHI' | wapuro == 'SI'   THEN out = 'º'
            WHEN wapuro == 'SU'                     THEN out = 'Ω'
            WHEN wapuro == 'SE'                     THEN out = 'æ'
            WHEN wapuro == 'SO'                     THEN out = 'ø'
            WHEN wapuro == 'ZA'                     THEN out = 'ªﬁ'
            WHEN wapuro == 'JI' | wapuro == 'ZI'    THEN out = 'ºﬁ'
            WHEN wapuro == 'ZU'                     THEN out = 'Ωﬁ'
            WHEN wapuro == 'ZE'                     THEN out = 'æﬁ'
            WHEN wapuro == 'ZO'                     THEN out = 'øﬁ'
            WHEN wapuro == 'TA'                     THEN out = '¿'
            WHEN wapuro == 'CHI'                    THEN out = '¡'
            WHEN wapuro == 'TSU' | wapuro == 'TU'   THEN DO 
                                                        IF smallkana == 1 THEN out = 'Ø'
                                                        ELSE                   out = '¬'
                                                    END
            WHEN wapuro == 'TE'                     THEN out = '√'
            WHEN wapuro == 'TO'                     THEN out = 'ƒ'
            WHEN wapuro == 'DA'                     THEN out = '¿ﬁ'
            WHEN wapuro == 'DZI'                    THEN out = '¡ﬁ'
            WHEN wapuro == 'DU' | wapuro == 'DZU'   THEN out = '¬ﬁ'
            WHEN wapuro == 'DE'                     THEN out = '√ﬁ'
            WHEN wapuro == 'DO'                     THEN out = 'ƒﬁ'
            WHEN wapuro == 'NA'                     THEN out = '≈'
            WHEN wapuro == 'NI'                     THEN out = '∆'
            WHEN wapuro == 'NU'                     THEN out = '«'
            WHEN wapuro == 'NE'                     THEN out = '»'
            WHEN wapuro == 'NO'                     THEN out = '…'
            WHEN wapuro == 'HA'                     THEN out = ' '
            WHEN wapuro == 'HI'                     THEN out = 'À'
            WHEN wapuro == 'FU' | wapuro == 'HU'    THEN out = 'Ã'
            WHEN wapuro == 'HE'                     THEN out = 'Õ'
            WHEN wapuro == 'HO'                     THEN out = 'Œ'
            WHEN wapuro == 'BA'                     THEN out = ' ﬁ'
            WHEN wapuro == 'BI'                     THEN out = 'Àﬁ'
            WHEN wapuro == 'BU'                     THEN out = 'Ãﬁ'
            WHEN wapuro == 'BE'                     THEN out = 'Õﬁ'
            WHEN wapuro == 'BO'                     THEN out = 'Œﬁ'
            WHEN wapuro == 'PA'                     THEN out = ' ﬂ'
            WHEN wapuro == 'PI'                     THEN out = 'Àﬂ'
            WHEN wapuro == 'PU'                     THEN out = 'Ãﬂ'
            WHEN wapuro == 'PE'                     THEN out = 'Õﬂ'
            WHEN wapuro == 'PO'                     THEN out = 'Œﬂ'
            WHEN wapuro == 'MA'                     THEN out = 'œ'
            WHEN wapuro == 'MI'                     THEN out = '–'
            WHEN wapuro == 'MU'                     THEN out = '—'
            WHEN wapuro == 'ME'                     THEN out = '“'
            WHEN wapuro == 'MO'                     THEN out = '”'
            WHEN wapuro == 'YA'                     THEN DO 
                                                        IF smallkana == 1 THEN out = '¨'
                                                        ELSE                   out = '‘'
                                                    END
            WHEN wapuro == 'YU'                     THEN DO 
                                                        IF smallkana == 1 THEN out = '≠'
                                                        ELSE                   out = '’'
                                                    END
            WHEN wapuro == 'YO'                     THEN DO 
                                                        IF smallkana == 1 THEN out = 'Æ'
                                                        ELSE                   out = '÷'
                                                    END
            WHEN wapuro == 'RA' | wapuro == 'LA'    THEN out = '◊'
            WHEN wapuro == 'RI' | wapuro == 'LI'    THEN out = 'ÿ'
            WHEN wapuro == 'RU' | wapuro == 'LU'    THEN out = 'Ÿ'
            WHEN wapuro == 'RE' | wapuro == 'LE'    THEN out = '⁄'
            WHEN wapuro == 'RO' | wapuro == 'LO'    THEN out = '€'
            WHEN wapuro == 'WA'                     THEN out = '‹'
            WHEN wapuro == 'WO'                     THEN out = '¶'
            WHEN wapuro == 'N'  | wapuro == 'M'     THEN out = '›'
            WHEN wapuro == 'KYA'                    THEN out = '∑¨'
            WHEN wapuro == 'KYU'                    THEN out = '∑≠'
            WHEN wapuro == 'KYO'                    THEN out = '∑Æ'
            WHEN wapuro == 'GYA'                    THEN out = '∑ﬁ¨'
            WHEN wapuro == 'GYU'                    THEN out = '∑ﬁ≠'
            WHEN wapuro == 'GYO'                    THEN out = '∑ﬁÆ'
            WHEN wapuro == 'SHA' | wapuro == 'SYA'  THEN out = 'º¨'
            WHEN wapuro == 'SHU' | wapuro == 'SYU'  THEN out = 'º≠'
            WHEN wapuro == 'SHO' | wapuro == 'SYO'  THEN out = 'ºÆ'
            WHEN wapuro == 'JA'  | wapuro == 'ZYA'  THEN out = 'ºﬁ¨'
            WHEN wapuro == 'JU'  | wapuro == 'ZYU'  THEN out = 'ºﬁ≠'
            WHEN wapuro == 'JO'  | wapuro == 'ZYO'  THEN out = 'ºﬁÆ'
            WHEN wapuro == 'CHA'                    THEN out = '¡¨'
            WHEN wapuro == 'CHU'                    THEN out = '¡≠'
            WHEN wapuro == 'CHO'                    THEN out = '¡Æ'
            WHEN wapuro == 'NYA'                    THEN out = '∆¨'
            WHEN wapuro == 'NYU'                    THEN out = '∆≠'
            WHEN wapuro == 'NYO'                    THEN out = '∆Æ'
            WHEN wapuro == 'HYA'                    THEN out = 'À¨'
            WHEN wapuro == 'HYU'                    THEN out = 'À≠'
            WHEN wapuro == 'HYO'                    THEN out = 'ÀÆ'
            WHEN wapuro == 'BYA'                    THEN out = 'Àﬁ¨'
            WHEN wapuro == 'BYU'                    THEN out = 'Àﬁ≠'
            WHEN wapuro == 'BYO'                    THEN out = 'ÀﬁÆ'
            WHEN wapuro == 'PYA'                    THEN out = 'Àﬂ¨'
            WHEN wapuro == 'PYU'                    THEN out = 'Àﬂ≠'
            WHEN wapuro == 'PYO'                    THEN out = 'ÀﬂÆ'
            WHEN wapuro == 'MYA'                    THEN out = '–¨'
            WHEN wapuro == 'MYU'                    THEN out = '–≠'
            WHEN wapuro == 'MYO'                    THEN out = '–Æ'
            WHEN wapuro == 'RYA'                    THEN out = 'ÿ¨'
            WHEN wapuro == 'RYU'                    THEN out = 'ÿ≠'
            WHEN wapuro == 'RYO'                    THEN out = 'ÿÆ'
            WHEN wapuro == 'KWA'                    THEN out = '∏ß'
            WHEN wapuro == 'KWO'                    THEN out = '∏´'
            WHEN wapuro == 'GWA'                    THEN out = '∏ﬁß'
            WHEN wapuro == 'SHE'                    THEN out = '∏ﬁ´'
            WHEN wapuro == 'JE'                     THEN out = 'ºﬁ™'
            WHEN wapuro == 'CHE'                    THEN out = '¡™'
            WHEN wapuro == 'TSA'                    THEN out = '¬ß'
            WHEN wapuro == 'TSE'                    THEN out = '¬™'
            WHEN wapuro == 'TSO'                    THEN out = '¬´'
            WHEN wapuro == 'TI'                     THEN out = '√®'
            WHEN wapuro == 'DI'                     THEN out = '√ﬁ®'
            WHEN wapuro == 'DYU'                    THEN out = '√ﬁ≠'
            WHEN wapuro == 'FA'                     THEN out = 'Ãß'
            WHEN wapuro == 'FI'                     THEN out = 'Ã®'
            WHEN wapuro == 'FE'                     THEN out = 'Ã™'
            WHEN wapuro == 'FO'                     THEN out = 'Ã´'
            WHEN wapuro == 'WI'                     THEN out = '≥®'
            WHEN wapuro == 'WE'                     THEN out = '≥™'
            WHEN wapuro == 'WO'                     THEN out = '≥´'
            WHEN wapuro == 'YE'                     THEN out = '≤™'
            WHEN wapuro == 'VA'                     THEN out = '≥ﬁß'
            WHEN wapuro == 'VI'                     THEN out = '≥ﬁ®'
            WHEN wapuro == 'VU'                     THEN out = '≥ﬁ'
            WHEN wapuro == 'VE'                     THEN out = '≥ﬁ™'
            WHEN wapuro == 'VO'                     THEN out = '≥ﬁ´'
            OTHERWISE
                out = wapuro
        END
    END
    smallkana = 0

    ok = VRMethod( "MLE_INPUT", "Insert", out )

RETURN 1

/*:VRX         DoCopy
*/
DoCopy: PROCEDURE EXPOSE rxuls
    PARSE ARG cliptext

    CALL VRMethod 'Application', 'PutClipboard', cliptext
    IF rxuls THEN DO
        CALL ULSPutUnicodeClipboard cliptext, 932 
/*
        IF ULSERR \= '0' THEN SAY ULSERR 
        CALL BEEP 262, 10
        CALL BEEP 440, 10
*/
    END

RETURN

/*:VRX         DoPaste
*/
DoPaste: PROCEDURE EXPOSE rxuls

    IF rxuls THEN DO
        cliptext = ULSGetUnicodeClipboard( 932 ) 
        /* IF ULSERR \= '0' THEN SAY ULSERR */
        IF cliptext == '' THEN 
            cliptext = VRMethod('Application', 'GetClipboard')
/*
        ELSE DO
            CALL BEEP 440, 10
            CALL BEEP 262, 10
        END
*/
    END
    ELSE
        cliptext = VRMethod('Application', 'GetClipboard')

    /* Only accept the first line of clipboard text, because linebreaks play 
     * havoc with the boundary parsing logic.
     */
    cliptext = TRANSLATE( cliptext, '0d'x, '0a'x )
    PARSE VAR cliptext pastetext '0d'x .
    CALL VRMethod 'MLE_INPUT', 'Insert', pastetext 

RETURN

/*:VRX         Fini
*/
Fini:
    window = VRWindow()
    call VRSet window, "Visible", 0
    drop window
return 0

/*:VRX         Halt
*/
Halt:
    signal _VREHalt
return

/*:VRX         Init
*/
Init:
    CALL RxFuncAdd 'SysLoadFuncs', 'REXXUTIL', 'SysLoadFuncs'
    CALL SysLoadFuncs

    /* Attempt to load RXULS library (used for Unicode clipboard support).
     */
    rxuls = 0
    CALL RxFuncAdd 'ULSLoadFuncs', 'RXULS', 'ULSLoadFuncs'
    CALL ULSLoadFuncs
    IF RxFuncQuery('ULSGetUnicodeClipboard') == 0 THEN rxuls = 1

    /* Hide the VX-REXX console window. 
     */
    CALL VRSet 'Console', 'WindowListTitle', '' 

    /* Set up the user interface defaults.
     */
    CALL LoadPrefs
    CALL UpdateStatus

    window = VRWindow()
    call VRSet window, "Visible", 1
    call VRMethod window, "Activate"
    drop window

    kana  = ''
    state = 0
    smallkana = 0

RETURN

/*:VRX         LoadPrefs
*/
LoadPrefs: PROCEDURE EXPOSE settings.

    os2_ini = VALUE('USER_INI',,'OS2ENVIRONMENT')
    inipath = VRParseFilePath( os2_ini, 'DP')
    IF inipath == '' THEN inipath = SysBootDrive() || '\OS2'

    settings.!ini = inipath'\imerj.ini'
    IF STREAM( settings.!ini, 'C', 'QUERY EXISTS') == '' THEN DO
        CALL VRMethod VRWindow(), 'CenterWindow'
        RETURN
    END

    /* Load position and size settings
     */
    settings.!x      = VRGetIni('Window', 'Left',   settings.!ini, 'NoClose')
    settings.!y      = VRGetIni('Window', 'Top',    settings.!ini, 'NoClose')
    settings.!width  = VRGetIni('Window', 'Width',  settings.!ini, 'NoClose')
    settings.!height = VRGetIni('Window', 'Height', settings.!ini, 'NoClose')
    IF settings.!x      == '' THEN settings.!x      = -1
    IF settings.!y      == '' THEN settings.!y      = -1
    IF settings.!width  == '' THEN settings.!width  = 0
    IF settings.!height == '' THEN settings.!height = 0

    /* Load font and colour settings
     */
    settings.!bgclr   = VRGetIni('Style', 'Background', settings.!ini, 'NoClose')
    settings.!fgclr   = VRGetIni('Style', 'Foreground', settings.!ini, 'NoClose')
    settings.!font    = VRGetIni('Style', 'Font',       settings.!ini )
    IF settings.!bgclr == '' THEN settings.!bgclr = 'EntryField'
    IF settings.!fgclr == '' THEN settings.!fgclr = 'OutputText'
    IF settings.!font  == '' THEN settings.!font  = '10.Times New Roman MT 30'

    /*
     * Now apply the settings
     */
    IF ( settings.!width > 0 ) & ( settings.!height > 0 ) THEN DO
        CALL VRSet VRWindow(), 'Width',  settings.!width
        CALL VRSet VRWindow(), 'Height', settings.!height
    END
    IF ( settings.!x >= 0 ) & ( settings.!y >= 0 ) THEN DO
        CALL VRSet VRWindow(), 'Left', settings.!x
        CALL VRSet VRWindow(), 'Top',  settings.!y
    END
    ELSE 
        CALL VRMethod VRWindow(), 'CenterWindow'

    CALL VRSet 'MLE_INPUT', 'Font',      settings.!font
    CALL VRSet 'MLE_INPUT', 'BackColor', settings.!bgclr
    CALL VRSet 'MLE_INPUT', 'ForeColor', settings.!fgclr

RETURN

/*:VRX         MI_ABOUT_Click
*/
MI_ABOUT_Click: 
    CALL VRLoadSecondary 'SW_ABOUT', 'W'
return

/*:VRX         MI_EXIT_Click
*/
MI_EXIT_Click: 
    CALL Quit
return

/*:VRX         MI_FULLWIDTH_Click
*/
MI_FULLWIDTH_Click: 
    mode = VRGet('MI_FULLWIDTH', 'Checked')
    mode = \mode
    CALL VRSet 'MI_FULLWIDTH', 'Checked', mode
    CALL UpdateStatus
RETURN

/*:VRX         MI_ROMAJI_Click
*/
MI_ROMAJI_Click: 
    CALL ToggleConversion
    CALL UpdateStatus
RETURN

/*:VRX         MLE_INPUT_KeyPress
*/
MLE_INPUT_KeyPress: 

    /* Get the current contents, cursor position and selection attributes.
     * (1 represents the first character; the cursor position is measured
     * from the preceding character boundary.  Note that SetSel and QuerySel
     * actually start from 0, so we have to adjust by one when using either.)
     */
    inputchar  = VRGet('MLE_INPUT', 'KeyString')
    contents   = VRGet('MLE_INPUT', 'Value')
    cursor     = VRMethod('MLE_INPUT', 'QuerySel', 'cursor')  + 1
    markleft   = VRMethod('MLE_INPUT', 'QuerySel', 'minimum') + 1
    markright  = VRMethod('MLE_INPUT', 'QuerySel', 'maximum') + 1
    marklength = markright - markleft

    /* For some reason, alphabetic keyboard accelerators aren't processed
     * when CapsLock is on.  
     */
    IF inputchar == '{Ctrl}F' THEN DO
        CALL MI_FULLWIDTH_Click
        RETURN 
    END

    /* A couple of special characters that require Alt as a modifier.
     */
    IF inputchar == '{Alt}0' THEN inputchar = '~'
    IF inputchar == '{Alt}/' THEN inputchar = '\'

    /* Locate all the character boundaries (since this is variable-width text).
     */
    flags = CharAttr( contents )

    /* Now locate the "correct" cursor position (on a character boundary).
     */
    cursor = AdjustPos( flags, cursor, 0 )

    /* Here we handle control keys that change the text contents.  (The MLE 
     * would normally handle most of these itself, except that we had to make it
     * read-only in order to override the text input behaviour.  So we have to
     * handle all update actions ourselves.)
     */
    IF LEFT( inputchar, 1 ) == '{' THEN DO

        SELECT

            /* Handle cut and paste events.  
             */
            WHEN inputchar == '{Shift}{Ins}' THEN DO
                state = 0
                kana = ''
                CALL DoPaste
            END

            WHEN inputchar == '{Ctrl}{Ins}' THEN DO
                state = 0
                kana = ''

                /* Adjust text selection to match character boundaries.
                 */
                markleft  = AdjustPos( flags, markleft,  0 )
                markright = AdjustPos( flags, markright, 1 )
                IF marklength > 0 THEN 
                    marklength = markright - markleft
                IF marklength > 0 THEN  DO        
                    /* Copy selected text. 
                     */
                    cliptext  = SUBSTR( contents, markleft, marklength )
                    CALL DoCopy cliptext
                END
                ELSE 
                    CALL VRMethod 'Application', 'PutClipboard', ''

                /* Clear the key event to prevent the MLE from doing its default
                 * copy (which would erase the Unicode clipboard contents).
                 */
                CALL VRSet 'MLE_INPUT', 'KeyString', ''
            END

            WHEN inputchar == '{Shift}{Del}' THEN DO
                state = 0
                kana = ''

                /* Adjust text selection to match character boundaries.
                 */
                markleft  = AdjustPos( flags, markleft,  0 )
                markright = AdjustPos( flags, markright, 1 )
                IF marklength > 0 THEN 
                    marklength = markright - markleft
                IF marklength > 0 THEN  DO        
                    /* Cut selected text. 
                     */
                    cliptext  = SUBSTR( contents, markleft, marklength )
                    contents  = DELSTR( contents, markleft, marklength )
                    cursornew = markleft
                    CALL VRSet 'MLE_INPUT', 'Value', contents
                    CALL VRMethod 'MLE_INPUT', 'SetSel', cursornew - 1, cursornew - 1
                    CALL DoCopy cliptext
                END
                ELSE 
                    CALL VRMethod 'Application', 'PutClipboard', ''
            END

            WHEN inputchar == '{Backspace}' THEN DO
                state = 0
                kana = ''

                /* Adjust text selection to match character boundaries.
                 */
                markleft   = AdjustPos( flags, markleft,  0 )
                markright  = AdjustPos( flags, markright, 1 )
                IF marklength > 0 THEN 
                    marklength = markright - markleft
                prior  = AdjustPos( flags, cursor - 1, 0 )
                IF marklength > 0 THEN DO       
                    /* Delete selected text only.
                     */
                    contents  = DELSTR( contents, markleft, marklength )
                    cursornew = markleft
                END
                ELSE IF cursor > cwidth THEN DO 
                    /* Delete single character ahead of cursor position (unless
                     * there isn't a full character in front of it, i.e. we're
                     * at the beginning of the text).
                     */
                    contents  = DELSTR( contents, cursor - cwidth, cwidth )
                    cursornew = prior
                END
                CALL VRSet 'MLE_INPUT', 'Value', contents
                CALL VRMethod 'MLE_INPUT', 'SetSel', cursornew - 1, cursornew - 1
            END

            WHEN inputchar == '{Del}' THEN DO
                state = 0
                kana = ''

                /* Adjust text selection to match character boundaries.
                 */
                markleft   = AdjustPos( flags, markleft,  0 )
                markright  = AdjustPos( flags, markright, 1 )
                IF marklength > 0 THEN 
                    marklength = markright - markleft
                IF marklength > 0 THEN  DO        
                    /* Delete selected text. 
                     */
                    contents  = DELSTR( contents, markleft, marklength )
                    cursornew = markleft
                END
                ELSE DO
                    /* Delete single character at cursor position.
                     */
                    contents  = DELSTR( contents, cursor, cwidth )
                    cursornew = cursor
                END
                CALL VRSet 'MLE_INPUT', 'Value', contents
                CALL VRMethod 'MLE_INPUT', 'SetSel', cursornew - 1, cursornew - 1
            END

            WHEN ( inputchar == '{Enter}') | ( inputchar == '{Newline}') THEN 
                CALL ConvertKana kana

/* Disabled: allowing line breaks seems to cause weird problems.
 *              CALL VRMethod 'MLE_INPUT', 'Insert', '0D'x
 */

            OTHERWISE DO
                state = 0
                kana = ''
            END

        END
        RETURN 0

    END


    /* When entering text, move the the cursor position to the correct character
     * boundary before anything else.
     */
    CALL VRMethod 'MLE_INPUT', 'SetSel', cursor - 1, cursor - 1

    /* If we're not in romaji-to-kana conversion mode...
     */
    IF VRGet('MI_ROMAJI', 'Checked') == 0 THEN DO

        /* Handle fullwidth ASCII characters.
         */
        IF VRGet('MI_FULLWIDTH', 'Checked') THEN 
            CALL VRMethod 'MLE_INPUT', 'Insert', ConvertFullwidth( inputchar )
            
        /* Otherwise, simply output the character verbatim and return. 
         */
        ELSE 
            CALL VRMethod 'MLE_INPUT', 'Insert', inputchar
        RETURN 0
    END

    /* Now handle displayable characters.
     */
    IF ( VERIFY( inputchar, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') > 0 ) THEN DO
        /* If it's not an alphabetic character, it can't be romaji input.  So
         * try and convert it immediately.  (Some punctuation marks do have 
         * ideographic versions.)
         */
        IF kana \= '' THEN DO
            CALL ConvertKana kana
        END
        /* IF C2X( inputchar ) == '0D' THEN SAY */
        IF ( TRANSLATE( kana ) == 'N' & inputchar == "'") THEN 
            /* (This allows use of ' to force the standalone N syllable.) */
            NOP
        ELSE 
            CALL ConvertKana inputchar
        state = 0
        kana = ''
    END
    ELSE IF state == 0 THEN DO
        /* We're not in the middle of a syllable, so start entering a new one. 
         */
        IF ( VERIFY( inputchar, 'AEIOUaeiou') == 0 ) THEN DO
            CALL ConvertKana inputchar
            kana = ''
        END
        ELSE IF TRANSLATE( inputchar ) == 'X' THEN 
            smallkana = 1
        ELSE DO
            state = 1
            kana = inputchar
        END
    END
    ELSE DO
        /* There's a syllable already in progress, so attempt to continue it.
         */
        IF inputchar == LEFT( kana, 1 ) THEN DO
            /* First, handle the case of "double" consonants.
             */
            IF TRANSLATE( kana ) == 'N' THEN DO
                /* Double N is a special case. 
                 */
                CALL ConvertKana kana
                kana = inputchar
            END
            ELSE DO
                /* Other double consonants must be indicated by prepending the
                 * "small tsu" kana mark.
                 */
                IF VRGet('MI_FULLWIDTH', 'Checked') THEN DO
                    IF VERIFY( inputchar, 'ABCDEFGHIJKLMOPQRSTUVWXYZ') == 0 THEN
                        CALL VRMethod 'MLE_INPUT', 'Insert', 'Éb'
                    ELSE
                        CALL VRMethod 'MLE_INPUT', 'Insert', 'Ç¡'
                END
                ELSE
                    CALL VRMethod 'MLE_INPUT', 'Insert', 'Ø'
            END
        END
        ELSE DO

            /* First, if the "in progress" kana contains only N/M, and the new
             * character is not a valid second character for N- or M-, then we
             * assume we're dealing with the standalone N syllable.  So convert 
             * it and then start a new "in progress" kana using the new letter.
             */
            IF ( TRANSLATE( kana ) == 'N' | TRANSLATE( kana ) == 'M') & ( VERIFY( inputchar, 'AEIOUYaeiouy') > 0 ) THEN DO
                CALL ConvertKana kana
                IF VERIFY( inputchar, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 0 THEN
                    kana = inputchar
                ELSE DO
                    kana = ''
                    state = 0
                END
            END

            /* Otherwise, if this is a valid trailing character, append it to 
             * the current "in progress" kana.
             */
            ELSE IF ( VERIFY( inputchar, 'AEIOUHYSZWaeiouhyszw') == 0 ) THEN DO
                kana = kana || inputchar
                IF ( VERIFY( inputchar, 'HYSZWhyszw') > 0 ) THEN DO
                    CALL ConvertKana kana
                    kana = ''
                    state = 0
                END
            END
        END
    END

RETURN 0

/*:VRX         PB_ABOUTOK_Click
*/
PB_ABOUTOK_Click: 
    CALL SW_ABOUT_Close
return

/*:VRX         Quit
*/
Quit:

    clip = VRMethod('Application', 'GetClipboard')
    text = VRGet('MLE_INPUT', 'Value')
    IF ( text \= '' & text \= clip ) THEN DO
        buttons.0 = 2
        buttons.1 = '~Yes' 
        buttons.2 = '~No'
        id = VRMessage('WN_MAIN',, 
                       'The current text will be lost if you close this window without copying it to the clipboard first.  Close anyway?',,
                       'Confirm Close', 'W', 'buttons.', 2 )
        IF id \= 1 THEN RETURN
    END

    CALL SavePrefs

    window = VRWindow()
    call VRSet window, "Shutdown", 1
    drop window

    IF rxuls THEN CALL ULSDropFuncs

RETURN

/*:VRX         SavePrefs
*/
SavePrefs: PROCEDURE EXPOSE settings.

    bgclr = VRGet('MLE_INPUT', 'BackColor')
    fgclr = VRGet('MLE_INPUT', 'ForeColor')
    font  = VRGet('MLE_INPUT', 'Font')

    xpos   = VRGet( VRWindow(), 'Left')
    ypos   = VRGet( VRWindow(), 'Top')
    width  = VRGet( VRWindow(), 'Width')
    height = VRGet( VRWindow(), 'Height')

    CALL VRSetIni 'Window', 'Left',   xpos,   settings.!ini, 'NoClose'
    CALL VRSetIni 'Window', 'Top',    ypos,   settings.!ini, 'NoClose'
    CALL VRSetIni 'Window', 'Width',  width,  settings.!ini, 'NoClose'
    CALL VRSetIni 'Window', 'Height', height, settings.!ini, 'NoClose'

    CALL VRSetIni 'Style', 'Background', bgclr, settings.!ini, 'NoClose'
    CALL VRSetIni 'Style', 'Foreground', fgclr, settings.!ini, 'NoClose'
    CALL VRSetIni 'Style', 'Font',       font,  settings.!ini

RETURN

/*:VRX         SW_ABOUT_Close
*/
SW_ABOUT_Close: 
    call SW_ABOUT_Fini
return

/*:VRX         SW_ABOUT_Create
*/
SW_ABOUT_Create: 
    call SW_ABOUT_Init
return

/*:VRX         SW_ABOUT_Fini
*/
SW_ABOUT_Fini: 
    window = VRInfo( "Window" )
    call VRDestroy window
    drop window
return
/*:VRX         SW_ABOUT_Init
*/
SW_ABOUT_Init: 

    CALL VRMethod 'MLE_TERMS', 'Insert', 'This program is free software; you can redistribute it and/or modify' ,
                                         'it under the terms of the GNU General Public License as published by' ,
                                         'the Free Software Foundation; either version 2 of the License, or' ,
                                         '(at your option) any later version.'
    CALL VRMethod 'MLE_TERMS', 'Insert', '0d0a0d0a'x
    CALL VRMethod 'MLE_TERMS', 'Insert', 'This program is distributed in the hope that it will be' ,
                                         'useful, but WITHOUT ANY WARRANTY; without even the implied warranty' ,
                                         'of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU' ,
                                         'General Public License for more details.'
    CALL VRMethod 'MLE_TERMS', 'Insert', '0d0a0d0a'x
    CALL VRMethod 'MLE_TERMS', 'Insert', 'You should have received a copy of the GNU General Public' ,
                                         'License along with this program; if not, write to the Free Software' ,
                                         'Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.'
    CALL VRMethod 'MLE_TERMS', 'SetSel', 0, 0

    window = VRInfo( "Object" )
    if( \VRIsChildOf( window, "Notebook" ) ) then do
        call VRMethod window, "CenterWindow"
        call VRSet window, "Visible", 1
        call VRMethod window, "Activate"
    end
    drop window
return

/*:VRX         ToggleConversion
*/
ToggleConversion: 
    mode = VRGet('MI_ROMAJI', 'Checked')
    mode = \mode
    CALL VRSet 'MI_ROMAJI', 'Checked', mode
RETURN

/*:VRX         UpdateStatus
*/
UpdateStatus: 
    IF VRGet('MI_ROMAJI', 'Checked') THEN 
        modetext = 'Kana Conversion'
    ELSE
        modetext = 'ASCII/Direct Input'

    IF VRGet('MI_FULLWIDTH', 'Checked') THEN
        widthtext = 'Fullwidth'
    ELSE
        widthtext = 'Halfwidth'

    CALL VRSet 'DT_STATUS', 'Caption', modetext '-' widthtext
RETURN

/*:VRX         WN_MAIN_Close
*/
WN_MAIN_Close:
    call Quit
return

